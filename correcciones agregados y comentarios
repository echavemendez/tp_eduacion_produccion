import pandas as pd
import numpy as np
import duckdb as dd
import unicodedata #para corregir formato de los departamentos

#%%
# Cargar los 4 archivos directamente
carpeta = 'C:/Users/Manuel/Desktop/tp_labo'
df_actividades = pd.read_csv(carpeta + '/actividades_establecimientos.csv')

df_educativos = pd.read_excel(carpeta + '/2022_padron_oficial_establecimientos_educativos.xlsx', skiprows=6)

# renombramos las columnas porque hay nombres repetidos y se dificulta referenciarlas bien para armar las tablas correctamente
df_educativos.columns = [f"col{i}" for i in range(len(df_educativos.columns))]

df_productivos = pd.read_csv(carpeta + '/Datos_por_departamento_actividad_y_sexo.csv')

df_padron_poblacion = pd.read_excel(carpeta + '/padron_poblacion.xlsX',skiprows=12)

#%%
# tabla establecimientos educativos
query_establecimientos_educativos = """
SELECT col1 AS cueanexo, col20 AS jardin_maternal, col21 AS jardin_infantil, 
       col22 AS primario, col23 AS secundario, col24 AS secundario_tecnico, 
       col25 AS terciario, col26 AS terciario_tecnico
FROM df_educativos
"""
df_establecimientos_educativos = dd.query(query_establecimientos_educativos).df()
#%%
# tabla departamento
query_departamento = """
SELECT DISTINCT in_departamentos AS id_depto, departamento AS nombre_depto
FROM df_productivos
"""
df_departamento = dd.query(query_departamento).df()
def quitar_tildes(texto):
    if isinstance(texto, str):
        # Normaliza el texto y elimina los acentos
        texto_sin_tilde = unicodedata.normalize('NFKD', texto)
        return ''.join(c for c in texto_sin_tilde if not unicodedata.combining(c))
    return texto

# Aplicamos la función a la columna de interés
df_departamento["nombre_depto"] = df_departamento["nombre_depto"].apply(quitar_tildes)
#%%
# tabla provincia
# corregimos nombres y formatos asi luego no tenemos problemas en los JOIN.
query_provincia = """
SELECT DISTINCT
    provincia_id AS id_provincia,
    CASE
        WHEN LOWER(TRIM(provincia)) IN ('caba', 'ciudad autonoma de buenos aires', 'ciudad autónoma de buenos aires') THEN 'Ciudad de Buenos Aires'
        WHEN LOWER(TRIM(provincia)) = 'cordoba' THEN 'Córdoba'
        WHEN LOWER(TRIM(provincia)) = 'entre rios' THEN 'Entre Ríos'
        WHEN LOWER(TRIM(provincia)) = 'tucuman' THEN 'Tucumán'
        WHEN LOWER(TRIM(provincia)) = 'rio negro' THEN 'Río Negro'
        WHEN LOWER(TRIM(provincia)) = 'neuquen' THEN 'Neuquén'
        WHEN LOWER(TRIM(provincia)) = 'santiago del estero' THEN 'Santiago del Estero'
        WHEN LOWER(TRIM(provincia)) = 'tierra del fuego' THEN 'Tierra del Fuego'
        ELSE provincia
    END AS nombre_provincia
FROM df_productivos
"""
df_provincia = dd.query(query_provincia).df()

#%%
# tabla actividad
query_actividad = """
        SELECT clae6,clae6_desc
        FROM df_actividades
"""
df_actividad = dd.query(query_actividad)
#%%
# tabla establecimientos productivos
query_establecimientos_productivos = """
    SELECT  provincia_id AS id_provincia, in_departamentos AS id_depto, clae6, genero, Empleo, Establecimientos, empresas_exportadoras
    FROM df_productivos
    WHERE anio == 2022
"""
df_establecimientos_productivos = dd.query(query_establecimientos_productivos).df()

#%%
# reformateo de padron_poblacion ya que esta muy feo. 

# 1️⃣ Creamos una columna auxiliar para identificar las filas con "AREA # ..."
df_padron_poblacion['id_depto'] = df_padron_poblacion['Unnamed: 1'].where(df_padron_poblacion['Unnamed: 1'].astype(str).str.startswith('AREA'))

# 2️⃣ Propagamos el área hacia abajo para rellenar las filas de la subtabla
df_padron_poblacion['id_depto'] = df_padron_poblacion['id_depto'].ffill()

# 3️⃣ Nos quedamos solo con las filas que tienen datos de la tabla (Edad no nula)
df_padron_aux = df_padron_poblacion[df_padron_poblacion['Unnamed: 1'].notna()].copy()

# 4️⃣ Renombramos columnas a algo legible
df_padron_limpio = df_padron_aux.rename(columns={
    'Unnamed: 1': 'Edad',
    'Unnamed: 2': 'Casos',
    'Unnamed: 3': 'Porcentaje',
    'Unnamed: 4': 'Porcentaje Acumulado',
})
# 5️⃣ Limpiamos el campo del área (sacamos el texto y nos quedamos con el número)
df_padron_limpio['id_depto'] = df_padron_aux['id_depto'].str.replace('AREA #', '').str.strip()
df_padron_limpio = df_padron_limpio.drop(columns=['area'], errors='ignore')
df_padron_limpio = df_padron_limpio.drop(columns=['Unnamed: 0'], errors='ignore')

# 6️⃣ Nos quedamos solo con filas donde las columnas numéricas son efectivamente números
cols_numericas = ['Edad', 'Casos', 'Porcentaje', 'Porcentaje Acumulado', 'id_depto']
df_padron_limpio = df_padron_limpio.dropna(subset=cols_numericas)  # eliminamos filas con NaN
df_padron_limpio = df_padron_limpio[df_padron_limpio[cols_numericas].applymap(lambda x: str(x).replace('.', '', 1).isdigit()).all(axis=1)]

# 7️⃣ Convertimos las columnas a numérico para asegurarnos
for col in cols_numericas:
    df_padron_limpio[col] = pd.to_numeric(df_padron_limpio[col])


#%% 
#ahora si, tabla poblacion

# diccionario de rangos educativos con edades mínimas y máximas
rangos_educativos = {
    'edad_jardin_maternal': (0, 2),
    'edad_jardin_infantil': (3, 5),
    'edad_primaria': (6, 13),
    'edad_secundaria': (12, 17),
    'edad_secundaria_tecnica': (12, 19),
    'edad_terciario': (18, 120),
    'edad_terciario_tecnico': (18, 120)
}

# función que devuelve la lista de rangos educativos para una edad dada
def asignar_rangos_educativos(edad):
    return [rango for rango, (min_edad, max_edad) in rangos_educativos.items() if min_edad <= edad <= max_edad]

# expandimos el DataFrame para manejar solapamientos, ya que las personas que pueden ir a la secundaria normal, pueden ir a la tecnica, lo mismo con el terciario.
df_expanded = df_padron_limpio.assign(rangos=df_padron_limpio['Edad'].apply(asignar_rangos_educativos)).explode('rangos')
df_expanded = df_expanded.rename(columns={'rangos': 'rango_educativo'})

# sumamos los casos por departamento y rango educativo
query = """
SELECT 
    id_depto,
    rango_educativo,
    SUM(casos) AS total_casos
FROM df_expanded
GROUP BY id_depto, rango_educativo
"""
df_suma = dd.query(query).df()

# pivotamos para que cada rango educativo sea una columna
df_poblacion = df_suma.pivot(index='id_depto', columns='rango_educativo', values='total_casos').fillna(0).reset_index()

# Aseguramos que todas las columnas existan aunque no haya datos
columnas = ['id_depto'] + list(rangos_educativos.keys())
for col in columnas:
    if col not in df_poblacion.columns:
        df_poblacion[col] = 0

df_poblacion = df_poblacion[columnas]


#%%
# tabla ubicación
query_ubicacion = """
SELECT DISTINCT provincia_id AS id_provincia, in_departamentos AS id_depto
FROM df_productivos
"""
df_ubicacion = dd.query(query_ubicacion).df()
#%%
#ACA ESTA CASI TODO SOLUCIONADO, RESTA VER QUE PASA CON ALGUNOS CUEANEXOS PUNTUALES, ES CORREGIR FORMATO PARA QUE EL JOIN SE HAGA BIEN
#UNA VEZ HECHO ESTO YA SE PUEDE HACER LA TABLA DEL EJ 1, Y TIRAR PARA ADELANTE!!



query_esta_en_aux = """
SELECT 
    u.id_provincia,p.nombre_provincia,
    u.id_depto, d.nombre_depto
FROM df_ubicacion u
INNER JOIN df_provincia p
    ON u.id_provincia = p.id_provincia
INNER JOIN df_departamento d
    ON u.id_depto = d.id_depto
"""

df_esta_en_aux = dd.query(query_esta_en_aux).df()

query_esta_en="""
    SELECT e.col1, a.id_provincia, a.id_depto 
    FROM df_esta_en_aux a
    RIGHT JOIN df_educativos e
    ON ((LOWER(e.col0) = LOWER(a.nombre_provincia)) AND (LOWER(e.col11) = LOWER(a.nombre_depto)))
"""
df_esta_en=dd.query(query_esta_en).df()
#%%
# Comienzo de las actividades y ejercicios solicitados por consigna
# Tabla cantidad de establecimientos por nivel, en cada departamento y cantidad de poblacion en edades educativas asociadas a los mismos

#inner join poblacion con ubicacion TENGO EDADES DE POBLACION CON ID PROVINCIA Y DEPTO

query_poblacion_ubicacion = """
SELECT DISTINCT p.id_depto,id_provincia, edad_jardin_maternal, edad_jardin_infantil, edad_primaria, edad_secundaria, edad_secundaria_tecnica, edad_terciario, edad_terciario_tecnico
FROM df_poblacion p 
INNER JOIN df_ubicacion u
    ON p.id_depto = u.id_depto
"""
df_poblacion_ubicacion = dd.query(query_poblacion_ubicacion).df()

#ESTA BIEN
#%%
#agrego Provincia con nombre_provincia y Departamento con nombre_depto
query_pob_ubi_con_nombres = """
SELECT DISTINCT
        nombre_depto AS Departamento,
        nombre_provincia AS Provincia,
        edad_jardin_maternal, 
        edad_jardin_infantil, 
        edad_primaria, 
        edad_secundaria, 
        edad_secundaria_tecnica, 
        edad_terciario, 
        edad_terciario_tecnico
FROM df_poblacion_ubicacion pu
INNER JOIN df_departamento d
    ON pu.id_depto = d.id_depto
INNER JOIN df_provincia p 
    ON pu.id_provincia = p.id_provincia
"""
df_pob_ubi_con_nombres = dd.query(query_pob_ubi_con_nombres).df()
#ESTA BIEN
#%%
# ACA ESTA EL TEMA, SE GENERAN TUPLAS ESPUREAS.
# TENEMOS QUE HACER INNER JOIN CON "ESTA EN" PARA SACAR LOS NOMBRES DE PROVINCIA Y DEPTO, SEGUN EL CUEANEXO, Y AHI
# HACER EL NUEVO JOIN SOBRE LOS NOMBRES

# generacion del df que contiene establecimientos educativos segun provincia
query_ee_con_prov = """
SELECT DISTINCT e.col0 AS Provincia, e.col11 AS Departamento, cueanexo, jardin_maternal, jardin_infantil, primario, secundario, secundario_tecnico, terciario, terciario_tecnico
FROM  df_establecimientos_educativos ee 
INNER JOIN df_educativos e
    ON ee.cueanexo = e.col1
"""
df_ee_con_prov = dd.query(query_ee_con_prov).df()

#%%
# generacion del df que contiene establecimientos educativos segun departamento y joineamos con provincia para tenerlo completo

query_pob_ubi_prov_depto = """
SELECT DISTINCT 
            p.Provincia,
            p.Departamento,
            cueanexo AS Cueanexo,
            jardin_maternal, 
            jardin_infantil, 
            primario, 
            secundario, 
            secundario_tecnico, 
            terciario, 
            terciario_tecnico,
            edad_jardin_maternal, 
            edad_jardin_infantil, 
            edad_primaria, 
            edad_secundaria, 
            edad_secundaria_tecnica, 
            edad_terciario, 
            edad_terciario_tecnico
FROM df_pob_ubi_con_nombres p 
INNER JOIN df_ee_con_prov e
ON (
    p.Provincia  = e.Provincia 
    )
"""
df_pob_ubi_prov_depto = dd.query(query_pob_ubi_prov_depto).df()

#%%
# NO HAY QUE SUMAR EDADES, CORREGIR, SI SUMAR EE
query_tabla_EE_poblacion="""
SELECT
    Provincia,
    Departamento,

    -- cantidad de jardines (contamos los '1' en las columnas de establecimiento)
      SUM(
        COALESCE(CAST(jardin_maternal AS INTEGER), 0)
      + COALESCE(CAST(jardin_infantil AS INTEGER), 0)
    ) AS Jardines
    -- población total en jardín (columnas de población asociadas)
    SUM(
        edad_jardin_infantil
      + edad_jardin_maternal
    ) AS "Población Jardín",

    -- cantidad de primarias
    SUM(
        COALESCE(primario, 0)
    ) AS Primarias,

    -- población total primaria
    SUM(
        edad_primaria
    ) AS "Población Primaria",

    -- cantidad de secundarios
    SUM(
        COALESCE(secundario, 0)
      + COALESCE(secundario_tecnica, 0)
    ) AS Secundarios,

    -- población total secundaria la tomamos como la de secundaria tecnica ya que el rango de edades se solapa y la tecnica dura mas años
    SUM(
        edad_secundaria_tecnica
    ) AS "Población Secundaria"

FROM df_pob_ubi_prov_depto
GROUP BY Provincia, Departamento
ORDER BY Provincia, Departamento;
"""

df_tabla_EE_poblacion=dd.query(query_tabla_EE_poblacion).df()

#%%
#HAY QUE HACERRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR

# unimos cantidades de cada nivel educativo con su provincia y departamento y sus respectivas poblaciones. Ademas, ordenamos
# las provincias alfabéticamente y las primarias por cantidad de forma descendiente.
query_cant_ee_depto = """
SELECT *
FROM df_cant_jardines_depto j
INNER JOIN  df_cant_primarios_depto p
    ON (j.Provincia = p.Provincia 
        AND
        j.Departamento = p.Departamento)
INNER JOIN df_cant_secundarios_depto s 
    ON (j.Provincia = s.Provincia 
        AND
        j.Departamento = s.Departamento)

INNER JOIN df_cant_terciarios_depto t 
    ON (j.Provincia = p.Provincia 
        AND
        j.Departamento = p.Departamento)
    
ORDER BY Provincia ASC, Primarias DESC
"""
df_cant_ee_depto = dd.query(query_cant_ee_depto).df()

#%%
# Tabla cantidad total de empleados por departamento item ii) 

# A la tabla de Establecimientos Productivos le agrego el nombre de la provincia y del departamento
# haciendo join con df_provincia y df_departamento.

query_ep_en_ubicación = """
SELECT *
FROM df_establecimientos_productivos ep
INNER JOIN df_departamento d
    ON d.id_depto = ep.id_depto
INNER JOIN df_provincia p
    ON p.id_provincia = ep.id_provincia
"""
df_ep_en_ubicación = dd.query(query_ep_en_ubicación).df()
#%%

# De la tabla anterior nosquedamos solo con Nombre Provincia, Nombre Departamento, y contamos cuantos empleados
# hay por cada Provincia y Departamento. Luego ordenamos descendientemente por Provincia, y por cantidad de empleados.
query_empleados_por_ubicación = """
SELECT 
    nombre_provincia AS Provincia, nombre_departamento AS Departamento, Cantidad_de_empleados_en_2022
    COUNT(Empleo) AS Cantidad_de_empleados_en_2022
FROM df_ep_en_ubicación e
GROUP BY Provincia AND Departamento
ORDER BY Provincia ASC, Cantidad_de_empleados_en_2022 ASC
"""

df_empleados_por_ubicación = dd.query(query_empleados_por_ubicación).df()

#%%
#tenemos poblacion por depto, con el nombre del depto, y provincia, con el nombre de la provincia 
query_poblacion_por_depto = """
SELECT nombre_depto AS Departamento, Población, nombre_provincia AS Provincia
    (edad_jardin_maternal + edad_jardin_infantil + edad_primaria + edad_secundaria + edad_secundaria_tecnica + edad_terciario + edad_terciario_tecnico) AS Población
FROM df_poblacion p
INNER JOIN df_departamento d
    ON d.nombre_depto = p.id_depto
INNER JOIN df_ubicacion u
ON p.id_depto = u.id_depto
INNER JOIN df_provincia pr
    ON u.id_provincia = pr.id_provincia
"""
df_poblacion_por_depto = dd.query(query_poblacion_por_depto).df()

query_mujeres = """
SELECT COUNT(empresas_exportadoras) AS cant_expo_mujeres, id_depto, id_provincia
FROM df_establecimientos_productivos
WHERE genero = mujeres
GROUP BY id_depto AND id_provincia 
"""
df_mujeres = dd.query(query_mujeres).df()

###################FALTA CANTIDAD DE ESTABLECIMIENTOS EDUCATIVOS (HAY QUE HACERLO POR ID DEPTO Y ESTA EN)
query_prod_pobl_depto = """
SELECT Provincia, Departamento, Población, cantidad_expo_mujeres 
FROM df_poblacion_por_depto p
"""




    
